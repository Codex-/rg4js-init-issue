diff --git a/node_modules/raygun4js/dist/raygun.umd.js b/node_modules/raygun4js/dist/raygun.umd.js
index 80ad832..11a68dd 100644
--- a/node_modules/raygun4js/dist/raygun.umd.js
+++ b/node_modules/raygun4js/dist/raygun.umd.js
@@ -3,6 +3,8 @@
 * Copyright (c) 2022 MindscapeHQ; Licensed MIT */
 // https://github.com/umdjs/umd/blob/master/templates/returnExportsGlobal.js
 
+console.log('raygun umd loaded');
+
 (function (root, factory) {
     if (typeof define === 'function' && define.amd) {
         // AMD. Register as an anonymous module.
@@ -5915,7 +5917,8 @@ raygunRumFactory(window, window.jQuery, window.__instantiatedRaygun);
     attach,
     enablePulse,
     noConflict,
-    captureUnhandledRejections;
+    captureUnhandledRejections,
+    hasCalledOnLoad = false;
 
   var snippetOnErrorSignature = ['function (b,c,d,f,g){', '||(g=new Error(b)),a[e].q=a[e].q||[]'];
 
@@ -5958,8 +5961,7 @@ raygunRumFactory(window, window.jQuery, window.__instantiatedRaygun);
           noConflict = value;
           break;
         case 'apiKey':
-          apiKey = value;
-          hasLoaded = true;
+          onApiKeySetHandler(value);
           break;
         case 'options':
           options = value;
@@ -6115,7 +6117,25 @@ raygunRumFactory(window, window.jQuery, window.__instantiatedRaygun);
     }
   };
 
-  var installGlobalExecutor = function() {
+  var onApiKeySetHandler = function (newApiKey) {
+    apiKey = newApiKey;
+
+    // If the API key is set after onLoadHandler has been called
+    // rg4js is in an uninitialised state.
+    //
+    // Users work around this by manually calling `'boot'`.
+    //
+    // If we set an API key after onLoadHandler has been called,
+    // simply call onLoadHandler again to get rg4js initialised.
+    if (hasCalledOnLoad) {
+      console.log('raygun4js hasCalledOnLoad true, calling onLoadHandler again...');
+      onLoadHandler();
+    }
+
+    hasLoaded = true;
+  };
+
+  var installGlobalExecutor = function () {
     window[window['RaygunObject']] = function() {
       return executor(arguments);
     };
@@ -6124,6 +6144,7 @@ raygunRumFactory(window, window.jQuery, window.__instantiatedRaygun);
   };
 
   var onLoadHandler = function() {
+    console.log('raygun4js onLoadHandler');
     parseSnippetOptions();
 
     if (noConflict) {
@@ -6141,6 +6162,8 @@ raygunRumFactory(window, window.jQuery, window.__instantiatedRaygun);
 
       options.from = 'onLoad';
       rg.init(apiKey, options, null);
+    } else {
+      console.log('raygun4js api key not defined');
     }
 
     if (attach) {
@@ -6173,15 +6196,25 @@ raygunRumFactory(window, window.jQuery, window.__instantiatedRaygun);
     }
 
     window[window['RaygunObject']].q = errorQueue;
+
+    console.log('raygun4js onLoadHandler hasCalledOnLoad true');
+    hasCalledOnLoad = true;
   };
 
   if (!Raygun.Utilities.isReactNative()) {
     if (document.readyState === 'complete') {
+      console.log('raygun4js document.readyState complete')
       onLoadHandler();
     } else if (window.addEventListener) {
-      window.addEventListener('load', onLoadHandler);
+      window.addEventListener('load', () => {
+        console.log('raygun4js addEventListener load complete')
+        onLoadHandler();
+      });
     } else {
-      window.attachEvent('onload', onLoadHandler);
+      window.attachEvent('onload', () => {
+        console.log('raygun4js addEventListener onload complete')
+        onLoadHandler();
+      });
     }
   } else {
     // Special case for React Native: set up the executor immediately,
